name: Build, Publish and Release
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DOCKER: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 登录到GitHub Container Registry
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 登录到Docker Hub
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKER }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 提取元数据用于GitHub Container Registry
      - name: Extract metadata for GHCR
        id: meta-ghcr
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      # 提取元数据用于Docker Hub
      - name: Extract metadata for Docker Hub
        id: meta-docker
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_DOCKER }}/${{ github.repository_owner }}/cloudflare-analytics
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      # 构建并推送到GitHub Container Registry
      - name: Build and push to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-ghcr.outputs.tags }}
          labels: ${{ steps.meta-ghcr.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 构建并推送到Docker Hub
      - name: Build and push to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-docker.outputs.tags }}
          labels: ${{ steps.meta-docker.outputs.labels }}
          cache-from: type=gha

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: github.event_name != 'pull_request'
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_GHCR }}/cloudflare-analytics:latest
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  create-release:
    runs-on: ubuntu-latest
    needs: [build-and-publish, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate release notes
        id: release-notes
        run: |
          echo "## 🚀 新版本发布" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 📦 Docker 镜像" >> release_notes.md
          echo "- **GitHub Container Registry**: \`ghcr.io/${{ github.repository }}:latest\`" >> release_notes.md
          echo "- **Docker Hub**: \`docker.io/${{ github.repository_owner }}/cloudflare-analytics:latest\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 🔧 使用方法" >> release_notes.md
          echo "\[\](file://c:\Users\lenovo\git\Cloudflare-Analytics\CLOUDFLARE_TOKEN_GUIDE.md)\`bash" >> release_notes.md
          echo "# 从 GitHub Container Registry 拉取" >> release_notes.md
          echo "docker pull ghcr.io/${{ github.repository }}:latest" >> release_notes.md
          echo "" >> release_notes.md
          echo "# 从 Docker Hub 拉取" >> release_notes.md
          echo "docker pull ${{ github.repository_owner }}/cloudflare-analytics:latest" >> release_notes.md
          echo "\[\](file://c:\Users\lenovo\git\Cloudflare-Analytics\CLOUDFLARE_TOKEN_GUIDE.md)\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 📋 本次更新" >> release_notes.md
          echo "- ✨ 添加30天数据分析功能" >> release_notes.md
          echo "- 🎨 新增浮动按钮组，跟随滚动显示" >> release_notes.md
          echo "- 📱 优化移动端响应式设计" >> release_notes.md
          echo "- 🐳 支持多平台Docker镜像推送" >> release_notes.md

          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: ${{ steps.release-notes.outputs.release_body }}
          draft: false
          prerelease: false

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-publish, security-scan, create-release]
    if: always()
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.build-and-publish.result }}" == "success" ] && [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "✅ 部署成功！"
            echo "📦 镜像已推送到："
            echo "  - GitHub Container Registry: ghcr.io/${{ github.repository }}:latest"
            echo "  - Docker Hub: ${{ github.repository_owner }}/cloudflare-analytics:latest"
          else
            echo "❌ 部署失败，请检查日志"
          fi
